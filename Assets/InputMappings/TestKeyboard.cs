//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputMappings/TestKeyboard.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace GTMY.AudioTest
{
    public partial class @TestKeyboard : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @TestKeyboard()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""TestKeyboard"",
    ""maps"": [
        {
            ""name"": ""Test"",
            ""id"": ""5af9ad41-263f-4ceb-9ba1-8d16a5bec9a4"",
            ""actions"": [
                {
                    ""name"": ""Quit"",
                    ""type"": ""Button"",
                    ""id"": ""feb8c0e4-0d00-42a1-b1dd-ac1e49cc8ad0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""VolumeDown"",
                    ""type"": ""Button"",
                    ""id"": ""4f5e87fb-d398-49a1-8d14-884ad93bdb06"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""VolumeUp"",
                    ""type"": ""Button"",
                    ""id"": ""7632be5d-40bb-4c72-ae02-d85ad89f0506"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mute"",
                    ""type"": ""Button"",
                    ""id"": ""ae009dec-9b28-47cd-9db8-c70d007734fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UnMute"",
                    ""type"": ""Button"",
                    ""id"": ""b0614292-af04-4bb1-aeb2-fc473d7913d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CollisionOccured"",
                    ""type"": ""Button"",
                    ""id"": ""7133686e-1e04-46c6-8cff-9343d5d2a08a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WeaponFired"",
                    ""type"": ""Button"",
                    ""id"": ""f64c992e-6038-44a7-98a9-76e9371f16ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Explosion"",
                    ""type"": ""Button"",
                    ""id"": ""1c4ecf5f-29bd-4144-9dc4-242a5d169963"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SfxTest"",
                    ""type"": ""Button"",
                    ""id"": ""d8cb067b-0b93-4bcb-9a7d-9a4655fcc006"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MusicPlay"",
                    ""type"": ""Button"",
                    ""id"": ""29585889-f7b7-42b4-b023-90a534893bc3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MusicStop"",
                    ""type"": ""Button"",
                    ""id"": ""cd6b3103-ce53-4da1-8114-5e3dc8e882f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MusicPause"",
                    ""type"": ""Button"",
                    ""id"": ""e27b2729-8ef7-4275-867c-9a9175a958c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MusicUnpause"",
                    ""type"": ""Button"",
                    ""id"": ""a4e694b7-1a1d-4d71-9e7d-4578e73d8a15"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""494b0363-dab9-4954-b0db-6c7e4ca01cd4"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b94662e3-6698-4815-8f89-4fbf87d8900f"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VolumeDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35cceb5e-3e15-4c34-bfa7-6e725bafcaf1"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VolumeUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79de4445-b081-4136-a799-8b71ec134058"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mute"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b29b82c-0d43-415b-a529-ff63bfc4fbee"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UnMute"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""470946f4-0523-42df-a737-3dd78487ef8e"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CollisionOccured"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e1c1c01-2835-4c39-9fbe-15724b7163a5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WeaponFired"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75ae7e2e-2b35-4c2e-83fa-3cefe5a680e8"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Explosion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57409842-e854-4983-a076-bb46eb085096"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SfxTest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f5d6b94-9eaf-4b9a-b753-da39862e2817"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MusicPlay"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53afb665-608f-4c71-9719-59fa17fde60d"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MusicStop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db7193d4-4978-4fe8-89b4-fd75c3e47fcb"",
                    ""path"": ""<Keyboard>/9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MusicPause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8179af17-74f6-4a7f-8b12-c29297917acf"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MusicUnpause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Test
            m_Test = asset.FindActionMap("Test", throwIfNotFound: true);
            m_Test_Quit = m_Test.FindAction("Quit", throwIfNotFound: true);
            m_Test_VolumeDown = m_Test.FindAction("VolumeDown", throwIfNotFound: true);
            m_Test_VolumeUp = m_Test.FindAction("VolumeUp", throwIfNotFound: true);
            m_Test_Mute = m_Test.FindAction("Mute", throwIfNotFound: true);
            m_Test_UnMute = m_Test.FindAction("UnMute", throwIfNotFound: true);
            m_Test_CollisionOccured = m_Test.FindAction("CollisionOccured", throwIfNotFound: true);
            m_Test_WeaponFired = m_Test.FindAction("WeaponFired", throwIfNotFound: true);
            m_Test_Explosion = m_Test.FindAction("Explosion", throwIfNotFound: true);
            m_Test_SfxTest = m_Test.FindAction("SfxTest", throwIfNotFound: true);
            m_Test_MusicPlay = m_Test.FindAction("MusicPlay", throwIfNotFound: true);
            m_Test_MusicStop = m_Test.FindAction("MusicStop", throwIfNotFound: true);
            m_Test_MusicPause = m_Test.FindAction("MusicPause", throwIfNotFound: true);
            m_Test_MusicUnpause = m_Test.FindAction("MusicUnpause", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Test
        private readonly InputActionMap m_Test;
        private ITestActions m_TestActionsCallbackInterface;
        private readonly InputAction m_Test_Quit;
        private readonly InputAction m_Test_VolumeDown;
        private readonly InputAction m_Test_VolumeUp;
        private readonly InputAction m_Test_Mute;
        private readonly InputAction m_Test_UnMute;
        private readonly InputAction m_Test_CollisionOccured;
        private readonly InputAction m_Test_WeaponFired;
        private readonly InputAction m_Test_Explosion;
        private readonly InputAction m_Test_SfxTest;
        private readonly InputAction m_Test_MusicPlay;
        private readonly InputAction m_Test_MusicStop;
        private readonly InputAction m_Test_MusicPause;
        private readonly InputAction m_Test_MusicUnpause;
        public struct TestActions
        {
            private @TestKeyboard m_Wrapper;
            public TestActions(@TestKeyboard wrapper) { m_Wrapper = wrapper; }
            public InputAction @Quit => m_Wrapper.m_Test_Quit;
            public InputAction @VolumeDown => m_Wrapper.m_Test_VolumeDown;
            public InputAction @VolumeUp => m_Wrapper.m_Test_VolumeUp;
            public InputAction @Mute => m_Wrapper.m_Test_Mute;
            public InputAction @UnMute => m_Wrapper.m_Test_UnMute;
            public InputAction @CollisionOccured => m_Wrapper.m_Test_CollisionOccured;
            public InputAction @WeaponFired => m_Wrapper.m_Test_WeaponFired;
            public InputAction @Explosion => m_Wrapper.m_Test_Explosion;
            public InputAction @SfxTest => m_Wrapper.m_Test_SfxTest;
            public InputAction @MusicPlay => m_Wrapper.m_Test_MusicPlay;
            public InputAction @MusicStop => m_Wrapper.m_Test_MusicStop;
            public InputAction @MusicPause => m_Wrapper.m_Test_MusicPause;
            public InputAction @MusicUnpause => m_Wrapper.m_Test_MusicUnpause;
            public InputActionMap Get() { return m_Wrapper.m_Test; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TestActions set) { return set.Get(); }
            public void SetCallbacks(ITestActions instance)
            {
                if (m_Wrapper.m_TestActionsCallbackInterface != null)
                {
                    @Quit.started -= m_Wrapper.m_TestActionsCallbackInterface.OnQuit;
                    @Quit.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnQuit;
                    @Quit.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnQuit;
                    @VolumeDown.started -= m_Wrapper.m_TestActionsCallbackInterface.OnVolumeDown;
                    @VolumeDown.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnVolumeDown;
                    @VolumeDown.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnVolumeDown;
                    @VolumeUp.started -= m_Wrapper.m_TestActionsCallbackInterface.OnVolumeUp;
                    @VolumeUp.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnVolumeUp;
                    @VolumeUp.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnVolumeUp;
                    @Mute.started -= m_Wrapper.m_TestActionsCallbackInterface.OnMute;
                    @Mute.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnMute;
                    @Mute.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnMute;
                    @UnMute.started -= m_Wrapper.m_TestActionsCallbackInterface.OnUnMute;
                    @UnMute.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnUnMute;
                    @UnMute.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnUnMute;
                    @CollisionOccured.started -= m_Wrapper.m_TestActionsCallbackInterface.OnCollisionOccured;
                    @CollisionOccured.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnCollisionOccured;
                    @CollisionOccured.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnCollisionOccured;
                    @WeaponFired.started -= m_Wrapper.m_TestActionsCallbackInterface.OnWeaponFired;
                    @WeaponFired.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnWeaponFired;
                    @WeaponFired.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnWeaponFired;
                    @Explosion.started -= m_Wrapper.m_TestActionsCallbackInterface.OnExplosion;
                    @Explosion.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnExplosion;
                    @Explosion.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnExplosion;
                    @SfxTest.started -= m_Wrapper.m_TestActionsCallbackInterface.OnSfxTest;
                    @SfxTest.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnSfxTest;
                    @SfxTest.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnSfxTest;
                    @MusicPlay.started -= m_Wrapper.m_TestActionsCallbackInterface.OnMusicPlay;
                    @MusicPlay.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnMusicPlay;
                    @MusicPlay.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnMusicPlay;
                    @MusicStop.started -= m_Wrapper.m_TestActionsCallbackInterface.OnMusicStop;
                    @MusicStop.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnMusicStop;
                    @MusicStop.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnMusicStop;
                    @MusicPause.started -= m_Wrapper.m_TestActionsCallbackInterface.OnMusicPause;
                    @MusicPause.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnMusicPause;
                    @MusicPause.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnMusicPause;
                    @MusicUnpause.started -= m_Wrapper.m_TestActionsCallbackInterface.OnMusicUnpause;
                    @MusicUnpause.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnMusicUnpause;
                    @MusicUnpause.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnMusicUnpause;
                }
                m_Wrapper.m_TestActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Quit.started += instance.OnQuit;
                    @Quit.performed += instance.OnQuit;
                    @Quit.canceled += instance.OnQuit;
                    @VolumeDown.started += instance.OnVolumeDown;
                    @VolumeDown.performed += instance.OnVolumeDown;
                    @VolumeDown.canceled += instance.OnVolumeDown;
                    @VolumeUp.started += instance.OnVolumeUp;
                    @VolumeUp.performed += instance.OnVolumeUp;
                    @VolumeUp.canceled += instance.OnVolumeUp;
                    @Mute.started += instance.OnMute;
                    @Mute.performed += instance.OnMute;
                    @Mute.canceled += instance.OnMute;
                    @UnMute.started += instance.OnUnMute;
                    @UnMute.performed += instance.OnUnMute;
                    @UnMute.canceled += instance.OnUnMute;
                    @CollisionOccured.started += instance.OnCollisionOccured;
                    @CollisionOccured.performed += instance.OnCollisionOccured;
                    @CollisionOccured.canceled += instance.OnCollisionOccured;
                    @WeaponFired.started += instance.OnWeaponFired;
                    @WeaponFired.performed += instance.OnWeaponFired;
                    @WeaponFired.canceled += instance.OnWeaponFired;
                    @Explosion.started += instance.OnExplosion;
                    @Explosion.performed += instance.OnExplosion;
                    @Explosion.canceled += instance.OnExplosion;
                    @SfxTest.started += instance.OnSfxTest;
                    @SfxTest.performed += instance.OnSfxTest;
                    @SfxTest.canceled += instance.OnSfxTest;
                    @MusicPlay.started += instance.OnMusicPlay;
                    @MusicPlay.performed += instance.OnMusicPlay;
                    @MusicPlay.canceled += instance.OnMusicPlay;
                    @MusicStop.started += instance.OnMusicStop;
                    @MusicStop.performed += instance.OnMusicStop;
                    @MusicStop.canceled += instance.OnMusicStop;
                    @MusicPause.started += instance.OnMusicPause;
                    @MusicPause.performed += instance.OnMusicPause;
                    @MusicPause.canceled += instance.OnMusicPause;
                    @MusicUnpause.started += instance.OnMusicUnpause;
                    @MusicUnpause.performed += instance.OnMusicUnpause;
                    @MusicUnpause.canceled += instance.OnMusicUnpause;
                }
            }
        }
        public TestActions @Test => new TestActions(this);
        public interface ITestActions
        {
            void OnQuit(InputAction.CallbackContext context);
            void OnVolumeDown(InputAction.CallbackContext context);
            void OnVolumeUp(InputAction.CallbackContext context);
            void OnMute(InputAction.CallbackContext context);
            void OnUnMute(InputAction.CallbackContext context);
            void OnCollisionOccured(InputAction.CallbackContext context);
            void OnWeaponFired(InputAction.CallbackContext context);
            void OnExplosion(InputAction.CallbackContext context);
            void OnSfxTest(InputAction.CallbackContext context);
            void OnMusicPlay(InputAction.CallbackContext context);
            void OnMusicStop(InputAction.CallbackContext context);
            void OnMusicPause(InputAction.CallbackContext context);
            void OnMusicUnpause(InputAction.CallbackContext context);
        }
    }
}
